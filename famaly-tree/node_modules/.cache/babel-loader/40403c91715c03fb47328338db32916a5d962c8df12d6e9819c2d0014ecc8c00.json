{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\FamalyTree\\\\famaly-tree\\\\src\\\\pages\\\\Tree.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from \"react\";\nimport * as go from \"gojs\";\nimport { ReactDiagram } from \"gojs-react\";\nimport { Context } from \"..\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet branchs = [];\nconst createBranches = persones => {\n  console.log(persones);\n  for (let i = 0; i < persones.length; i++) {\n    const persone = persones[i];\n    branchs[i] = {\n      key: persone.id,\n      lastname: persone.lastname,\n      firstname: persone.firstname,\n      surname: persone.surname,\n      sourse: persone.img\n    };\n  }\n  console.log(branchs);\n  branchs[1].parent = branchs[0].key;\n  branchs[2].parent = branchs[0].key;\n};\nfunction initDiagram() {\n  const $ = go.GraphObject.make;\n  // set your license key here before creating the diagram: go.Diagram.licenseKey = \"...\";\n  const diagram = $(go.Diagram, {\n    \"undoManager.isEnabled\": true,\n    // must be set to allow for model change listening\n    layout: new go.TreeLayout({\n      angle: 90,\n      layerSpacing: 35\n    }),\n    // 'undoManager.maxHistoryLength': 0,  // uncomment disable undo/redo functionality\n    \"clickCreatingTool.archetypeNodeData\": {\n      text: \"new node\",\n      color: \"lightblue\"\n    },\n    model: new go.TreeModel({\n      linkKeyProperty: \"key\" // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\n    })\n  });\n\n  // define a simple Node template\n  diagram.nodeTemplate = $(go.Node, \"Auto\",\n  // the Shape will go around the TextBlock\n  new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), $(go.Shape, \"RoundedRectangle\", {\n    name: \"SHAPE\",\n    fill: \"#ccc\",\n    strokeWidth: 0\n  }), $(go.Panel, \"Horizontal\", $(go.Picture, {\n    margin: 10,\n    width: 50,\n    height: 50,\n    background: \"white\"\n  }, new go.Binding(\"sourse\")), $(go.TextBlock, {\n    margin: 2,\n    editable: true\n  },\n  // some room around the text\n  new go.Binding(\"text\", \"lastname\").makeTwoWay()), $(go.TextBlock, {\n    margin: 2,\n    editable: true\n  },\n  // some room around the text\n  new go.Binding(\"text\", \"firstname\").makeTwoWay()), $(go.TextBlock, {\n    margin: 2,\n    editable: true\n  },\n  // some room around the text\n  new go.Binding(\"text\", \"surname\").makeTwoWay())));\n  diagram.linkTemplate = $(go.Link, {\n    routing: go.Link.Orthogonal,\n    corner: 5\n  }, new go.Shape({\n    strokeWidth: 3,\n    stroke: \"#ccc\"\n  }));\n  return diagram;\n}\n\n/**\r\n * This function handles any changes to the GoJS model.\r\n * It is here that you would make any updates to your React state, which is discussed below.\r\n */\nfunction handleModelChange(changes) {\n  //alert(\"GoJS model changed!\");\n}\nconst Tree = () => {\n  _s();\n  const {\n    persone\n  } = useContext(Context);\n  createBranches(persone.persones);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ReactDiagram, {\n      initDiagram: initDiagram,\n      divClassName: \"diagram-component\",\n      nodeDataArray: branchs,\n      onModelChange: handleModelChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(Tree, \"kL+k2mqcoeWnxB2DbCmUXgbybGA=\");\n_c = Tree;\nexport default Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useContext","go","ReactDiagram","Context","jsxDEV","_jsxDEV","branchs","createBranches","persones","console","log","i","length","persone","key","id","lastname","firstname","surname","sourse","img","parent","initDiagram","$","GraphObject","make","diagram","Diagram","layout","TreeLayout","angle","layerSpacing","text","color","model","TreeModel","linkKeyProperty","nodeTemplate","Node","Binding","Point","parse","makeTwoWay","stringify","Shape","name","fill","strokeWidth","Panel","Picture","margin","width","height","background","TextBlock","editable","linkTemplate","Link","routing","Orthogonal","corner","stroke","handleModelChange","changes","Tree","_s","children","divClassName","nodeDataArray","onModelChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Рабочий стол/FamalyTree/famaly-tree/src/pages/Tree.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport * as go from \"gojs\";\r\nimport { ReactDiagram } from \"gojs-react\";\r\nimport { Context } from \"..\";\r\n\r\nlet branchs = [];\r\n\r\nconst createBranches = (persones) => {\r\n  console.log(persones);\r\n  for (let i = 0; i < persones.length; i++) {\r\n    const persone = persones[i];\r\n    branchs[i] = {\r\n      key: persone.id,\r\n      lastname: persone.lastname,\r\n      firstname: persone.firstname,\r\n      surname: persone.surname,\r\n      sourse: persone.img,\r\n    };\r\n  }\r\n  console.log(branchs);\r\n  branchs[1].parent = branchs[0].key;\r\n  branchs[2].parent = branchs[0].key;\r\n};\r\n\r\nfunction initDiagram() {\r\n  const $ = go.GraphObject.make;\r\n  // set your license key here before creating the diagram: go.Diagram.licenseKey = \"...\";\r\n  const diagram = $(go.Diagram, {\r\n    \"undoManager.isEnabled\": true, // must be set to allow for model change listening\r\n    layout: new go.TreeLayout({ angle: 90, layerSpacing: 35 }), // 'undoManager.maxHistoryLength': 0,  // uncomment disable undo/redo functionality\r\n    \"clickCreatingTool.archetypeNodeData\": {\r\n      text: \"new node\",\r\n      color: \"lightblue\",\r\n    },\r\n    model: new go.TreeModel({\r\n      linkKeyProperty: \"key\", // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\r\n    }),\r\n  });\r\n\r\n  // define a simple Node template\r\n  diagram.nodeTemplate = $(\r\n    go.Node,\r\n    \"Auto\", // the Shape will go around the TextBlock\r\n    new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n      go.Point.stringify\r\n    ),\r\n    $(go.Shape, \"RoundedRectangle\", {\r\n      name: \"SHAPE\",\r\n      fill: \"#ccc\",\r\n      strokeWidth: 0,\r\n    }),\r\n    $(\r\n      go.Panel,\r\n      \"Horizontal\",\r\n      $(\r\n        go.Picture,\r\n        { margin: 10, width: 50, height: 50, background: \"white\" },\r\n        new go.Binding(\"sourse\")\r\n      ),\r\n      $(\r\n        go.TextBlock,\r\n        { margin: 2, editable: true }, // some room around the text\r\n        new go.Binding(\"text\", \"lastname\").makeTwoWay()\r\n      ),\r\n      $(\r\n        go.TextBlock,\r\n        { margin: 2, editable: true }, // some room around the text\r\n        new go.Binding(\"text\", \"firstname\").makeTwoWay()\r\n      ),\r\n      $(\r\n        go.TextBlock,\r\n        { margin: 2, editable: true }, // some room around the text\r\n        new go.Binding(\"text\", \"surname\").makeTwoWay()\r\n      )\r\n    )\r\n  );\r\n\r\n  diagram.linkTemplate = $(\r\n    go.Link,\r\n    { routing: go.Link.Orthogonal, corner: 5 },\r\n    new go.Shape({ strokeWidth: 3, stroke: \"#ccc\" })\r\n  );\r\n\r\n  return diagram;\r\n}\r\n\r\n/**\r\n * This function handles any changes to the GoJS model.\r\n * It is here that you would make any updates to your React state, which is discussed below.\r\n */\r\nfunction handleModelChange(changes) {\r\n  //alert(\"GoJS model changed!\");\r\n}\r\n\r\nconst Tree = () => {\r\n  const { persone } = useContext(Context);\r\n  createBranches(persone.persones);\r\n  return (\r\n    <div>\r\n      <ReactDiagram\r\n        initDiagram={initDiagram}\r\n        divClassName=\"diagram-component\"\r\n        nodeDataArray={branchs}\r\n        onModelChange={handleModelChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tree;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}