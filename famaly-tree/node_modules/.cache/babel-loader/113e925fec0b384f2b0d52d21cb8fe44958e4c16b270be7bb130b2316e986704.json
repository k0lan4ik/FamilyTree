{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\FamalyTree\\\\famaly-tree\\\\src\\\\pages\\\\Tree.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from \"react\";\nimport * as go from \"gojs\";\nimport { ReactDiagram } from \"gojs-react\";\nimport { Context } from \"..\";\nimport { PERSONE_ROUTE } from \"../utils/consts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet branchs = [];\n//const history = useNavigate;\n\nconst createBranches = persones => {\n  for (let i = 0; i < persones.length; i++) {\n    const persone = persones[i];\n    let color = \"#a1a7cc\";\n    if (i === 2) {\n      color = \"#cca1a1\";\n    }\n    branchs[i] = {\n      key: persone.id,\n      lastname: persone.lastname,\n      firstname: persone.firstname,\n      surname: persone.surname,\n      img: persone.img,\n      color: color\n    };\n  }\n  branchs[1].parent = branchs[0].key;\n  branchs[2].parent = branchs[0].key;\n};\nconst textStyle = {\n  margin: new go.Margin(2, 10, 0, 0),\n  stroke: \"white\"\n};\nfunction initDiagram() {\n  const $ = go.GraphObject.make;\n  // set your license key here before creating the diagram: go.Diagram.licenseKey = \"...\";\n  const diagram = $(go.Diagram, {\n    \"undoManager.isEnabled\": true,\n    // must be set to allow for model change listening\n    layout: new go.TreeLayout({\n      angle: 90,\n      layerSpacing: 35\n    }),\n    // 'undoManager.maxHistoryLength': 0,  // uncomment disable undo/redo functionality\n    //\"clickCreatingTool.archetypeNodeData\": {\n    // firstname: \"new persone\",\n    // color: \"#a1a7cc\",\n    //},\n    model: new go.TreeModel({\n      linkKeyProperty: \"key\" // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\n    })\n  });\n\n  // define a simple Node template\n  diagram.nodeTemplate = $(go.Node, \"Auto\",\n  // the Shape will go around the TextBlock\n  {\n    // here the second argument is this object, which is this Node\n    doubleClick: (e, node) => {\n      window.open(\"..\" + PERSONE_ROUTE + \"/\" + node.key);\n    }\n  }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), $(go.Shape, \"RoundedRectangle\", {\n    name: \"SHAPE\",\n    fill: \"#ccc\",\n    strokeWidth: 0\n  }, new go.Binding(\"fill\", \"color\")), $(go.Panel, \"Horizontal\", $(go.Picture, {\n    margin: 10,\n    width: 50,\n    height: 50,\n    background: \"white\"\n  }, new go.Binding(\"sourse\", \"img\")), $(go.Panel, \"Vertical\", $(go.TextBlock, textStyle,\n  // some room around the text\n  new go.Binding(\"text\", \"lastname\").makeTwoWay()), $(go.TextBlock, textStyle,\n  // some room around the text\n  new go.Binding(\"text\", \"firstname\").makeTwoWay()), $(go.TextBlock, textStyle,\n  // some room around the text\n  new go.Binding(\"text\", \"surname\").makeTwoWay()))));\n  diagram.nodeTemplate.contextMenu = $(\"ContextMenu\", $(\"ContextMenuButton\", $(go.TextBlock, \"Добавить Родствинека\"), {\n    click: (e, button) => {\n      const node = button.part.adornedPart;\n      if (node !== null) {\n        const thisemp = node.data;\n        diagram.startTransaction(\"add employee\");\n        const newemp = {\n          name: \"(new person)\",\n          title: \"\",\n          comments: \"\",\n          parent: thisemp.key\n        };\n        diagram.model.addNodeData(newemp);\n        const newnode = diagram.findNodeForData(newemp);\n        if (newnode) newnode.location = node.location;\n        diagram.commitTransaction(\"add employee\");\n      }\n    }\n  }), $(\"ContextMenuButton\", $(go.TextBlock, \"Удалить Родственника\"), {\n    click: (e, button) => {\n      // reparent the subtree to this node's boss, then remove the node\n      const node = button.part.adornedPart;\n      if (node !== null) {\n        diagram.startTransaction(\"reparent remove\");\n        const chl = node.findTreeChildrenNodes();\n        // iterate through the children and set their parent key to our selected node's parent key\n        while (chl.next()) {\n          const emp = chl.value;\n          diagram.model.setParentKeyForNodeData(emp.data, node.findTreeParentNode().data.key);\n        }\n        // and now remove the selected node itself\n        diagram.model.removeNodeData(node.data);\n        diagram.commitTransaction(\"reparent remove\");\n      }\n    }\n  }), $(\"ContextMenuButton\", $(go.TextBlock, \"Удалить Родственника и Цепь\"), {\n    click: (e, button) => {\n      // remove the whole subtree, including the node itself\n      const node = button.part.adornedPart;\n      if (node !== null) {\n        diagram.startTransaction(\"remove dept\");\n        diagram.removeParts(node.findTreeParts());\n        diagram.commitTransaction(\"remove dept\");\n      }\n    }\n  }), $(\"ContextMenuButton\", $(go.TextBlock, \"Toggle Assistant\"), {\n    click: (e, button) => {\n      // remove the whole subtree, including the node itself\n      const node = button.part.adornedPart;\n      if (node !== null) {\n        diagram.startTransaction(\"toggle assistant\");\n        diagram.model.setDataProperty(node.data, \"isAssistant\", !node.data.isAssistant);\n        diagram.layout.invalidateLayout();\n        diagram.commitTransaction(\"toggle assistant\");\n      }\n    }\n  }));\n  diagram.linkTemplate = $(go.Link, {\n    routing: go.Link.Orthogonal,\n    corner: 5\n  }, new go.Shape({\n    strokeWidth: 3,\n    stroke: \"#ccc\"\n  }));\n  return diagram;\n}\n\n/**\r\n * This function handles any changes to the GoJS model.\r\n * It is here that you would make any updates to your React state, which is discussed below.\r\n */\nfunction handleModelChange(changes) {\n  // console.log(changes);\n}\nconst Tree = () => {\n  _s();\n  const {\n    persone\n  } = useContext(Context);\n  createBranches(persone.persones);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ReactDiagram, {\n      initDiagram: initDiagram,\n      divClassName: \"diagram-component\",\n      nodeDataArray: branchs,\n      onModelChange: handleModelChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s(Tree, \"kL+k2mqcoeWnxB2DbCmUXgbybGA=\");\n_c = Tree;\nexport default Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useContext","go","ReactDiagram","Context","PERSONE_ROUTE","jsxDEV","_jsxDEV","branchs","createBranches","persones","i","length","persone","color","key","id","lastname","firstname","surname","img","parent","textStyle","margin","Margin","stroke","initDiagram","$","GraphObject","make","diagram","Diagram","layout","TreeLayout","angle","layerSpacing","model","TreeModel","linkKeyProperty","nodeTemplate","Node","doubleClick","e","node","window","open","Binding","Point","parse","makeTwoWay","stringify","Shape","name","fill","strokeWidth","Panel","Picture","width","height","background","TextBlock","contextMenu","click","button","part","adornedPart","thisemp","data","startTransaction","newemp","title","comments","addNodeData","newnode","findNodeForData","location","commitTransaction","chl","findTreeChildrenNodes","next","emp","value","setParentKeyForNodeData","findTreeParentNode","removeNodeData","removeParts","findTreeParts","setDataProperty","isAssistant","invalidateLayout","linkTemplate","Link","routing","Orthogonal","corner","handleModelChange","changes","Tree","_s","children","divClassName","nodeDataArray","onModelChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Рабочий стол/FamalyTree/famaly-tree/src/pages/Tree.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport * as go from \"gojs\";\r\nimport { ReactDiagram } from \"gojs-react\";\r\nimport { Context } from \"..\";\r\nimport { PERSONE_ROUTE } from \"../utils/consts\";\r\n\r\nlet branchs = [];\r\n//const history = useNavigate;\r\n\r\nconst createBranches = (persones) => {\r\n  for (let i = 0; i < persones.length; i++) {\r\n    const persone = persones[i];\r\n    let color = \"#a1a7cc\";\r\n    if (i === 2) {\r\n      color = \"#cca1a1\";\r\n    }\r\n    branchs[i] = {\r\n      key: persone.id,\r\n      lastname: persone.lastname,\r\n      firstname: persone.firstname,\r\n      surname: persone.surname,\r\n      img: persone.img,\r\n      color: color,\r\n    };\r\n  }\r\n  branchs[1].parent = branchs[0].key;\r\n  branchs[2].parent = branchs[0].key;\r\n};\r\n\r\nconst textStyle = { margin: new go.Margin(2, 10, 0, 0), stroke: \"white\" };\r\n\r\nfunction initDiagram() {\r\n  const $ = go.GraphObject.make;\r\n  // set your license key here before creating the diagram: go.Diagram.licenseKey = \"...\";\r\n  const diagram = $(go.Diagram, {\r\n    \"undoManager.isEnabled\": true, // must be set to allow for model change listening\r\n    layout: new go.TreeLayout({ angle: 90, layerSpacing: 35 }), // 'undoManager.maxHistoryLength': 0,  // uncomment disable undo/redo functionality\r\n    //\"clickCreatingTool.archetypeNodeData\": {\r\n    // firstname: \"new persone\",\r\n    // color: \"#a1a7cc\",\r\n    //},\r\n    model: new go.TreeModel({\r\n      linkKeyProperty: \"key\", // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\r\n    }),\r\n  });\r\n\r\n  // define a simple Node template\r\n  diagram.nodeTemplate = $(\r\n    go.Node,\r\n    \"Auto\", // the Shape will go around the TextBlock\r\n    {\r\n      // here the second argument is this object, which is this Node\r\n      doubleClick: (e, node) => {\r\n        window.open(\"..\" + PERSONE_ROUTE + \"/\" + node.key);\r\n      },\r\n    },\r\n    new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n      go.Point.stringify\r\n    ),\r\n    $(\r\n      go.Shape,\r\n      \"RoundedRectangle\",\r\n      {\r\n        name: \"SHAPE\",\r\n        fill: \"#ccc\",\r\n        strokeWidth: 0,\r\n      },\r\n      new go.Binding(\"fill\", \"color\")\r\n    ),\r\n    $(\r\n      go.Panel,\r\n      \"Horizontal\",\r\n      $(\r\n        go.Picture,\r\n        { margin: 10, width: 50, height: 50, background: \"white\" },\r\n        new go.Binding(\"sourse\", \"img\")\r\n      ),\r\n      $(\r\n        go.Panel,\r\n        \"Vertical\",\r\n        $(\r\n          go.TextBlock,\r\n          textStyle, // some room around the text\r\n          new go.Binding(\"text\", \"lastname\").makeTwoWay()\r\n        ),\r\n        $(\r\n          go.TextBlock,\r\n          textStyle, // some room around the text\r\n          new go.Binding(\"text\", \"firstname\").makeTwoWay()\r\n        ),\r\n        $(\r\n          go.TextBlock,\r\n          textStyle, // some room around the text\r\n          new go.Binding(\"text\", \"surname\").makeTwoWay()\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  diagram.nodeTemplate.contextMenu = $(\r\n    \"ContextMenu\",\r\n    $(\"ContextMenuButton\", $(go.TextBlock, \"Добавить Родствинека\"), {\r\n      click: (e, button) => {\r\n        const node = button.part.adornedPart;\r\n        if (node !== null) {\r\n          const thisemp = node.data;\r\n          diagram.startTransaction(\"add employee\");\r\n          const newemp = {\r\n            name: \"(new person)\",\r\n            title: \"\",\r\n            comments: \"\",\r\n            parent: thisemp.key,\r\n          };\r\n          diagram.model.addNodeData(newemp);\r\n          const newnode = diagram.findNodeForData(newemp);\r\n          if (newnode) newnode.location = node.location;\r\n          diagram.commitTransaction(\"add employee\");\r\n        }\r\n      },\r\n    }),\r\n    $(\"ContextMenuButton\", $(go.TextBlock, \"Удалить Родственника\"), {\r\n      click: (e, button) => {\r\n        // reparent the subtree to this node's boss, then remove the node\r\n        const node = button.part.adornedPart;\r\n        if (node !== null) {\r\n          diagram.startTransaction(\"reparent remove\");\r\n          const chl = node.findTreeChildrenNodes();\r\n          // iterate through the children and set their parent key to our selected node's parent key\r\n          while (chl.next()) {\r\n            const emp = chl.value;\r\n            diagram.model.setParentKeyForNodeData(\r\n              emp.data,\r\n              node.findTreeParentNode().data.key\r\n            );\r\n          }\r\n          // and now remove the selected node itself\r\n          diagram.model.removeNodeData(node.data);\r\n          diagram.commitTransaction(\"reparent remove\");\r\n        }\r\n      },\r\n    }),\r\n    $(\"ContextMenuButton\", $(go.TextBlock, \"Удалить Родственника и Цепь\"), {\r\n      click: (e, button) => {\r\n        // remove the whole subtree, including the node itself\r\n        const node = button.part.adornedPart;\r\n        if (node !== null) {\r\n          diagram.startTransaction(\"remove dept\");\r\n          diagram.removeParts(node.findTreeParts());\r\n          diagram.commitTransaction(\"remove dept\");\r\n        }\r\n      },\r\n    }),\r\n    $(\"ContextMenuButton\", $(go.TextBlock, \"Toggle Assistant\"), {\r\n      click: (e, button) => {\r\n        // remove the whole subtree, including the node itself\r\n        const node = button.part.adornedPart;\r\n        if (node !== null) {\r\n          diagram.startTransaction(\"toggle assistant\");\r\n          diagram.model.setDataProperty(\r\n            node.data,\r\n            \"isAssistant\",\r\n            !node.data.isAssistant\r\n          );\r\n          diagram.layout.invalidateLayout();\r\n          diagram.commitTransaction(\"toggle assistant\");\r\n        }\r\n      },\r\n    })\r\n  );\r\n\r\n  diagram.linkTemplate = $(\r\n    go.Link,\r\n    { routing: go.Link.Orthogonal, corner: 5 },\r\n    new go.Shape({ strokeWidth: 3, stroke: \"#ccc\" })\r\n  );\r\n\r\n  return diagram;\r\n}\r\n\r\n/**\r\n * This function handles any changes to the GoJS model.\r\n * It is here that you would make any updates to your React state, which is discussed below.\r\n */\r\nfunction handleModelChange(changes) {\r\n  // console.log(changes);\r\n}\r\n\r\nconst Tree = () => {\r\n  const { persone } = useContext(Context);\r\n  createBranches(persone.persones);\r\n  return (\r\n    <div>\r\n      <ReactDiagram\r\n        initDiagram={initDiagram}\r\n        divClassName=\"diagram-component\"\r\n        nodeDataArray={branchs}\r\n        onModelChange={handleModelChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tree;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}