{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\FamalyTree\\\\famaly-tree\\\\src\\\\pages\\\\Tree.js\";\nimport React from \"react\";\nimport * as go from \"gojs\";\nimport { ReactDiagram } from \"gojs-react\";\nimport PersoneStore from \"../store/PersoneStore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst persones = PersoneStore.persons;\nlet branchs = [];\nconst createBranches = () => {\n  for (let i = 0; i < persones.length; i++) {\n    const persone = persones[i];\n    branchs[i] = {\n      key: persone.id,\n      lastname: persone.lastname,\n      firstname: persone.firstname,\n      surname: persone.surname,\n      sourse: persone.imgg\n    };\n  }\n};\nfunction initDiagram() {\n  const $ = go.GraphObject.make;\n  // set your license key here before creating the diagram: go.Diagram.licenseKey = \"...\";\n  const diagram = $(go.Diagram, {\n    \"undoManager.isEnabled\": true,\n    // must be set to allow for model change listening\n    layout: new go.TreeLayout({\n      angle: 90,\n      layerSpacing: 35\n    }),\n    // 'undoManager.maxHistoryLength': 0,  // uncomment disable undo/redo functionality\n    \"clickCreatingTool.archetypeNodeData\": {\n      text: \"new node\",\n      color: \"lightblue\"\n    },\n    model: new go.TreeModel({\n      linkKeyProperty: \"key\" // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\n    })\n  });\n\n  // define a simple Node template\n  diagram.nodeTemplate = $(go.Node, \"Auto\",\n  // the Shape will go around the TextBlock\n  new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), $(go.Shape, \"RoundedRectangle\", {\n    name: \"SHAPE\",\n    fill: \"white\",\n    strokeWidth: 0\n  },\n  // Shape.fill is bound to Node.data.color\n  new go.Binding(\"x\")), $(go.Picture, {\n    margin: 10,\n    width: 50,\n    height: 50,\n    background: \"white\"\n  }, new go.Binding(\"sourse\")), $(go.TextBlock, {\n    margin: 8,\n    editable: true\n  },\n  // some room around the text\n  new go.Binding(\"lastname\").makeTwoWay()), $(go.TextBlock, {\n    margin: 8,\n    editable: true\n  },\n  // some room around the text\n  new go.Binding(\"firstname\").makeTwoWay()), $(go.TextBlock, {\n    margin: 8,\n    editable: true\n  },\n  // some room around the text\n  new go.Binding(\"surname\").makeTwoWay()));\n  diagram.linkTemplate = $(go.Link, {\n    routing: go.Link.Orthogonal,\n    corner: 5\n  }, new go.Shape({\n    strokeWidth: 3,\n    stroke: \"#ccc\"\n  }));\n  return diagram;\n}\n\n/**\r\n * This function handles any changes to the GoJS model.\r\n * It is here that you would make any updates to your React state, which is discussed below.\r\n */\nfunction handleModelChange(changes) {\n  //alert(\"GoJS model changed!\");\n}\nconst Tree = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ReactDiagram, {\n      initDiagram: initDiagram,\n      divClassName: \"diagram-component\",\n      nodeDataArray: [{\n        key: 0,\n        text: \"Alpha\",\n        loc: \"0 0\"\n      }, {\n        key: 1,\n        text: \"Beta\",\n        loc: \"150 0\",\n        parent: 0\n      }, {\n        key: 2,\n        text: \"Gamma\",\n        loc: \"0 150\",\n        parent: 0\n      }, {\n        key: 3,\n        text: \"Delta\",\n        loc: \"150 150\",\n        parent: 2\n      }],\n      onModelChange: handleModelChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_c = Tree;\nexport default Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","go","ReactDiagram","PersoneStore","jsxDEV","_jsxDEV","persones","persons","branchs","createBranches","i","length","persone","key","id","lastname","firstname","surname","sourse","imgg","initDiagram","$","GraphObject","make","diagram","Diagram","layout","TreeLayout","angle","layerSpacing","text","color","model","TreeModel","linkKeyProperty","nodeTemplate","Node","Binding","Point","parse","makeTwoWay","stringify","Shape","name","fill","strokeWidth","Picture","margin","width","height","background","TextBlock","editable","linkTemplate","Link","routing","Orthogonal","corner","stroke","handleModelChange","changes","Tree","children","divClassName","nodeDataArray","loc","parent","onModelChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Рабочий стол/FamalyTree/famaly-tree/src/pages/Tree.js"],"sourcesContent":["import React from \"react\";\r\nimport * as go from \"gojs\";\r\nimport { ReactDiagram } from \"gojs-react\";\r\nimport PersoneStore from \"../store/PersoneStore\";\r\n\r\nconst persones = PersoneStore.persons;\r\nlet branchs = [];\r\n\r\nconst createBranches = () => {\r\n  for (let i = 0; i < persones.length; i++) {\r\n    const persone = persones[i];\r\n    branchs[i] = {\r\n      key: persone.id,\r\n      lastname: persone.lastname,\r\n      firstname: persone.firstname,\r\n      surname: persone.surname,\r\n      sourse: persone.imgg,\r\n    };\r\n  }\r\n};\r\n\r\nfunction initDiagram() {\r\n  const $ = go.GraphObject.make;\r\n  // set your license key here before creating the diagram: go.Diagram.licenseKey = \"...\";\r\n  const diagram = $(go.Diagram, {\r\n    \"undoManager.isEnabled\": true, // must be set to allow for model change listening\r\n    layout: new go.TreeLayout({ angle: 90, layerSpacing: 35 }), // 'undoManager.maxHistoryLength': 0,  // uncomment disable undo/redo functionality\r\n    \"clickCreatingTool.archetypeNodeData\": {\r\n      text: \"new node\",\r\n      color: \"lightblue\",\r\n    },\r\n    model: new go.TreeModel({\r\n      linkKeyProperty: \"key\", // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\r\n    }),\r\n  });\r\n\r\n  // define a simple Node template\r\n  diagram.nodeTemplate = $(\r\n    go.Node,\r\n    \"Auto\", // the Shape will go around the TextBlock\r\n    new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n      go.Point.stringify\r\n    ),\r\n    $(\r\n      go.Shape,\r\n      \"RoundedRectangle\",\r\n      { name: \"SHAPE\", fill: \"white\", strokeWidth: 0 },\r\n      // Shape.fill is bound to Node.data.color\r\n      new go.Binding(\"x\")\r\n    ),\r\n    $(\r\n      go.Picture,\r\n      { margin: 10, width: 50, height: 50, background: \"white\" },\r\n      new go.Binding(\"sourse\")\r\n    ),\r\n    $(\r\n      go.TextBlock,\r\n      { margin: 8, editable: true }, // some room around the text\r\n      new go.Binding(\"lastname\").makeTwoWay()\r\n    ),\r\n    $(\r\n      go.TextBlock,\r\n      { margin: 8, editable: true }, // some room around the text\r\n      new go.Binding(\"firstname\").makeTwoWay()\r\n    ),\r\n    $(\r\n      go.TextBlock,\r\n      { margin: 8, editable: true }, // some room around the text\r\n      new go.Binding(\"surname\").makeTwoWay()\r\n    )\r\n  );\r\n\r\n  diagram.linkTemplate = $(\r\n    go.Link,\r\n    { routing: go.Link.Orthogonal, corner: 5 },\r\n    new go.Shape({ strokeWidth: 3, stroke: \"#ccc\" })\r\n  );\r\n\r\n  return diagram;\r\n}\r\n\r\n/**\r\n * This function handles any changes to the GoJS model.\r\n * It is here that you would make any updates to your React state, which is discussed below.\r\n */\r\nfunction handleModelChange(changes) {\r\n  //alert(\"GoJS model changed!\");\r\n}\r\n\r\nconst Tree = () => {\r\n  return (\r\n    <div>\r\n      <ReactDiagram\r\n        initDiagram={initDiagram}\r\n        divClassName=\"diagram-component\"\r\n        nodeDataArray={[\r\n          { key: 0, text: \"Alpha\", loc: \"0 0\" },\r\n          { key: 1, text: \"Beta\", loc: \"150 0\", parent: 0 },\r\n          {\r\n            key: 2,\r\n            text: \"Gamma\",\r\n            loc: \"0 150\",\r\n            parent: 0,\r\n          },\r\n          { key: 3, text: \"Delta\", loc: \"150 150\", parent: 2 },\r\n        ]}\r\n        onModelChange={handleModelChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tree;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,EAAE,MAAM,MAAM;AAC1B,SAASC,YAAY,QAAQ,YAAY;AACzC,OAAOC,YAAY,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,QAAQ,GAAGH,YAAY,CAACI,OAAO;AACrC,IAAIC,OAAO,GAAG,EAAE;AAEhB,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,QAAQ,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACxC,MAAME,OAAO,GAAGN,QAAQ,CAACI,CAAC,CAAC;IAC3BF,OAAO,CAACE,CAAC,CAAC,GAAG;MACXG,GAAG,EAAED,OAAO,CAACE,EAAE;MACfC,QAAQ,EAAEH,OAAO,CAACG,QAAQ;MAC1BC,SAAS,EAAEJ,OAAO,CAACI,SAAS;MAC5BC,OAAO,EAAEL,OAAO,CAACK,OAAO;MACxBC,MAAM,EAAEN,OAAO,CAACO;IAClB,CAAC;EACH;AACF,CAAC;AAED,SAASC,WAAWA,CAAA,EAAG;EACrB,MAAMC,CAAC,GAAGpB,EAAE,CAACqB,WAAW,CAACC,IAAI;EAC7B;EACA,MAAMC,OAAO,GAAGH,CAAC,CAACpB,EAAE,CAACwB,OAAO,EAAE;IAC5B,uBAAuB,EAAE,IAAI;IAAE;IAC/BC,MAAM,EAAE,IAAIzB,EAAE,CAAC0B,UAAU,CAAC;MAAEC,KAAK,EAAE,EAAE;MAAEC,YAAY,EAAE;IAAG,CAAC,CAAC;IAAE;IAC5D,qCAAqC,EAAE;MACrCC,IAAI,EAAE,UAAU;MAChBC,KAAK,EAAE;IACT,CAAC;IACDC,KAAK,EAAE,IAAI/B,EAAE,CAACgC,SAAS,CAAC;MACtBC,eAAe,EAAE,KAAK,CAAE;IAC1B,CAAC;EACH,CAAC,CAAC;;EAEF;EACAV,OAAO,CAACW,YAAY,GAAGd,CAAC,CACtBpB,EAAE,CAACmC,IAAI,EACP,MAAM;EAAE;EACR,IAAInC,EAAE,CAACoC,OAAO,CAAC,UAAU,EAAE,KAAK,EAAEpC,EAAE,CAACqC,KAAK,CAACC,KAAK,CAAC,CAACC,UAAU,CAC1DvC,EAAE,CAACqC,KAAK,CAACG,SACX,CAAC,EACDpB,CAAC,CACCpB,EAAE,CAACyC,KAAK,EACR,kBAAkB,EAClB;IAAEC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE,OAAO;IAAEC,WAAW,EAAE;EAAE,CAAC;EAChD;EACA,IAAI5C,EAAE,CAACoC,OAAO,CAAC,GAAG,CACpB,CAAC,EACDhB,CAAC,CACCpB,EAAE,CAAC6C,OAAO,EACV;IAAEC,MAAM,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE,EAAE;IAAEC,UAAU,EAAE;EAAQ,CAAC,EAC1D,IAAIjD,EAAE,CAACoC,OAAO,CAAC,QAAQ,CACzB,CAAC,EACDhB,CAAC,CACCpB,EAAE,CAACkD,SAAS,EACZ;IAAEJ,MAAM,EAAE,CAAC;IAAEK,QAAQ,EAAE;EAAK,CAAC;EAAE;EAC/B,IAAInD,EAAE,CAACoC,OAAO,CAAC,UAAU,CAAC,CAACG,UAAU,CAAC,CACxC,CAAC,EACDnB,CAAC,CACCpB,EAAE,CAACkD,SAAS,EACZ;IAAEJ,MAAM,EAAE,CAAC;IAAEK,QAAQ,EAAE;EAAK,CAAC;EAAE;EAC/B,IAAInD,EAAE,CAACoC,OAAO,CAAC,WAAW,CAAC,CAACG,UAAU,CAAC,CACzC,CAAC,EACDnB,CAAC,CACCpB,EAAE,CAACkD,SAAS,EACZ;IAAEJ,MAAM,EAAE,CAAC;IAAEK,QAAQ,EAAE;EAAK,CAAC;EAAE;EAC/B,IAAInD,EAAE,CAACoC,OAAO,CAAC,SAAS,CAAC,CAACG,UAAU,CAAC,CACvC,CACF,CAAC;EAEDhB,OAAO,CAAC6B,YAAY,GAAGhC,CAAC,CACtBpB,EAAE,CAACqD,IAAI,EACP;IAAEC,OAAO,EAAEtD,EAAE,CAACqD,IAAI,CAACE,UAAU;IAAEC,MAAM,EAAE;EAAE,CAAC,EAC1C,IAAIxD,EAAE,CAACyC,KAAK,CAAC;IAAEG,WAAW,EAAE,CAAC;IAAEa,MAAM,EAAE;EAAO,CAAC,CACjD,CAAC;EAED,OAAOlC,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA,SAASmC,iBAAiBA,CAACC,OAAO,EAAE;EAClC;AAAA;AAGF,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACjB,oBACExD,OAAA;IAAAyD,QAAA,eACEzD,OAAA,CAACH,YAAY;MACXkB,WAAW,EAAEA,WAAY;MACzB2C,YAAY,EAAC,mBAAmB;MAChCC,aAAa,EAAE,CACb;QAAEnD,GAAG,EAAE,CAAC;QAAEiB,IAAI,EAAE,OAAO;QAAEmC,GAAG,EAAE;MAAM,CAAC,EACrC;QAAEpD,GAAG,EAAE,CAAC;QAAEiB,IAAI,EAAE,MAAM;QAAEmC,GAAG,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAE,CAAC,EACjD;QACErD,GAAG,EAAE,CAAC;QACNiB,IAAI,EAAE,OAAO;QACbmC,GAAG,EAAE,OAAO;QACZC,MAAM,EAAE;MACV,CAAC,EACD;QAAErD,GAAG,EAAE,CAAC;QAAEiB,IAAI,EAAE,OAAO;QAAEmC,GAAG,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAE,CAAC,CACpD;MACFC,aAAa,EAAER;IAAkB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACC,EAAA,GArBIX,IAAI;AAuBV,eAAeA,IAAI;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}