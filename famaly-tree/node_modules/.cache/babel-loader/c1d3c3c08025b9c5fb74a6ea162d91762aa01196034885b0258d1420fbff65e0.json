{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\FamalyTree\\\\famaly-tree\\\\src\\\\pages\\\\Tree.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport * as go from \"gojs\";\nimport { ReactDiagram } from \"gojs-react\";\nimport { Context } from \"..\";\nimport { PERSONE_ROUTE } from \"../utils/consts\";\nimport { fetchPersonesForTree, createPersone } from \"../http/personeAPI\";\nimport { checkId } from \"../routes\";\nimport { Spinner } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tree = () => {\n  _s();\n  const {\n    persone,\n    user\n  } = useContext(Context);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchPersonesForTree().then(data => {\n      persone.setPersones(data.rows);\n    }).finally(() => {\n      setLoading(false);\n    });\n  });\n  let branchs = [];\n\n  //let link = []\n  //const history = useNavigate;\n\n  const createBranches = persones => {\n    for (let i = 0; i < persones.length; i++) {\n      const persone = persones[i];\n      let color = \"#ccc\";\n      if (persone.gender === \"men\") {\n        color = \"#a1a7cc\";\n      } else if (persone.gender === \"women\") {\n        color = \"#cca1a1\";\n      }\n      branchs[i] = {\n        key: persone.id,\n        parent: persone.parent,\n        lastname: persone.lastname,\n        firstname: persone.firstname,\n        surname: persone.surname,\n        img: \"1829050.png\",\n        //REACT_APP_API_URL + persone.img,\n        color: color\n      };\n      // link[i] = {\n      //  key: -(i + 1),\n      //  from: persone.id,\n      // to: persone.parent,\n      //};\n      //console.log(link[i]);\n    }\n  };\n\n  const textStyle = {\n    margin: new go.Margin(2, 10, 0, 0),\n    stroke: \"white\"\n  };\n  function initDiagram() {\n    const $ = go.GraphObject.make;\n    // set your license key here before creating the diagram: go.Diagram.licenseKey = \"...\";\n    const diagram = $(go.Diagram, {\n      \"undoManager.isEnabled\": true,\n      // must be set to allow for model change listening\n      layout: new go.TreeLayout({\n        angle: 90,\n        layerSpacing: 35\n      }),\n      // 'undoManager.maxHistoryLength': 0,  // uncomment disable undo/redo functionality\n      //\"clickCreatingTool.archetypeNodeData\": {\n      // firstname: \"new persone\",\n      // color: \"#a1a7cc\",\n      //},\n      model: new go.TreeModel({\n        linkKeyProperty: \"key\" // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\n      })\n    });\n\n    // define a simple Node template\n    diagram.nodeTemplate = $(go.Node, \"Auto\",\n    // the Shape will go around the TextBlock\n    {\n      // here the second argument is this object, which is this Node\n      doubleClick: (e, node) => {\n        window.open(\"..\" + PERSONE_ROUTE + \"/\" + node.key);\n      }\n    }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), $(go.Shape, \"RoundedRectangle\", {\n      name: \"SHAPE\",\n      fill: \"#ccc\",\n      strokeWidth: 0\n    }, new go.Binding(\"fill\", \"color\")), $(go.Panel, \"Horizontal\", $(go.Picture, {\n      //source: \"1829050.png\",\n      margin: 10,\n      width: 50,\n      height: 50,\n      background: \"white\"\n    }, new go.Binding(\"sourse\", \"img\")), $(go.Panel, \"Vertical\", $(go.TextBlock, textStyle,\n    // some room around the text\n    new go.Binding(\"text\", \"lastname\").makeTwoWay()), $(go.TextBlock, textStyle,\n    // some room around the text\n    new go.Binding(\"text\", \"firstname\").makeTwoWay()), $(go.TextBlock, textStyle,\n    // some room around the text\n    new go.Binding(\"text\", \"surname\").makeTwoWay()))));\n    if (checkId() === (Number.isInteger(user.user.id) ? user.user.id.toString() : \"0\")) {\n      diagram.nodeTemplate.contextMenu = $(\"ContextMenu\", $(\"ContextMenuButton\", $(go.TextBlock, \"Добавить Родственика\"), {\n        click: (e, button) => {\n          const node = button.part.adornedPart;\n          if (node !== null) {\n            const thisemp = node.data;\n            diagram.startTransaction(\"add employee\");\n            const newemp = {\n              firstname: \"Родственник\",\n              parent: thisemp.key\n            };\n            diagram.model.addNodeData(newemp);\n            const newnode = diagram.findNodeForData(newemp);\n            if (newnode) newnode.location = node.location;\n            createPersone({\n              firstname: newemp.firstname,\n              parent: newemp.parent,\n              user: user.user.id,\n              info: '{\"info\": [{\"title\": \"Дата рождения\", \"description\":\"\"},{\"title\": \"Страна\", \"description\":\"\"},{\"title\": \"Город\", \"description\":\"\"}]}'\n            }).then(() => diagram.commitTransaction(\"add employee\"));\n          }\n        }\n      }), $(\"ContextMenuButton\", $(go.TextBlock, \"Удалить Родственника\"), {\n        click: (e, button) => {\n          // reparent the subtree to this node's boss, then remove the node\n          const node = button.part.adornedPart;\n          if (node !== null) {\n            diagram.startTransaction(\"reparent remove\");\n            const chl = node.findTreeChildrenNodes();\n            // iterate through the children and set their parent key to our selected node's parent key\n            while (chl.next()) {\n              const emp = chl.value;\n              diagram.model.setParentKeyForNodeData(emp.data, node.findTreeParentNode().data.key);\n            }\n            // and now remove the selected node itself\n            diagram.model.removeNodeData(node.data);\n            diagram.commitTransaction(\"reparent remove\");\n          }\n        }\n      }), $(\"ContextMenuButton\", $(go.TextBlock, \"Удалить Родственника и Цепь\"), {\n        click: (e, button) => {\n          // remove the whole subtree, including the node itself\n          const node = button.part.adornedPart;\n          if (node !== null) {\n            diagram.startTransaction(\"remove dept\");\n            diagram.removeParts(node.findTreeParts());\n            diagram.commitTransaction(\"remove dept\");\n          }\n        }\n      }));\n    }\n    diagram.linkTemplate = $(go.Link, {\n      routing: go.Link.Orthogonal,\n      corner: 5\n    }, new go.Shape({\n      strokeWidth: 3,\n      stroke: \"#ccc\"\n    }));\n    return diagram;\n  }\n\n  /**\r\n   * This function handles any changes to the GoJS model.\r\n   * It is here that you would make any updates to your React state, which is discussed belo.\r\n   */\n  function handleModelChange(changes) {\n    // console.log(changes);\n  }\n  createBranches(persone.persones);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"grow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0414\\u0435\\u0440\\u0435\\u0432\\u043E \\u0437\\u0430\\u0433\\u0440\\u0443\\u0436\\u0430\\u0435\\u0442\\u0441\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ReactDiagram, {\n      initDiagram: initDiagram,\n      divClassName: \"diagram-component\",\n      nodeDataArray: branchs,\n      onModelChange: handleModelChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(Tree, \"Ne4URUySrZ6lqk+U0yNB+r83Fso=\");\n_c = Tree;\nexport default Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["React","useContext","useEffect","useState","go","ReactDiagram","Context","PERSONE_ROUTE","fetchPersonesForTree","createPersone","checkId","Spinner","jsxDEV","_jsxDEV","Tree","_s","persone","user","loading","setLoading","then","data","setPersones","rows","finally","branchs","createBranches","persones","i","length","color","gender","key","id","parent","lastname","firstname","surname","img","textStyle","margin","Margin","stroke","initDiagram","$","GraphObject","make","diagram","Diagram","layout","TreeLayout","angle","layerSpacing","model","TreeModel","linkKeyProperty","nodeTemplate","Node","doubleClick","e","node","window","open","Binding","Point","parse","makeTwoWay","stringify","Shape","name","fill","strokeWidth","Panel","Picture","width","height","background","TextBlock","Number","isInteger","toString","contextMenu","click","button","part","adornedPart","thisemp","startTransaction","newemp","addNodeData","newnode","findNodeForData","location","info","commitTransaction","chl","findTreeChildrenNodes","next","emp","value","setParentKeyForNodeData","findTreeParentNode","removeNodeData","removeParts","findTreeParts","linkTemplate","Link","routing","Orthogonal","corner","handleModelChange","changes","children","animation","fileName","_jsxFileName","lineNumber","columnNumber","divClassName","nodeDataArray","onModelChange","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Рабочий стол/FamalyTree/famaly-tree/src/pages/Tree.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport * as go from \"gojs\";\r\nimport { ReactDiagram } from \"gojs-react\";\r\nimport { Context } from \"..\";\r\nimport { PERSONE_ROUTE } from \"../utils/consts\";\r\nimport { fetchPersonesForTree, createPersone } from \"../http/personeAPI\";\r\nimport { checkId } from \"../routes\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Tree = () => {\r\n  const { persone, user } = useContext(Context);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchPersonesForTree()\r\n      .then((data) => {\r\n        persone.setPersones(data.rows);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  });\r\n\r\n  let branchs = [];\r\n\r\n  //let link = []\r\n  //const history = useNavigate;\r\n\r\n  const createBranches = (persones) => {\r\n    for (let i = 0; i < persones.length; i++) {\r\n      const persone = persones[i];\r\n      let color = \"#ccc\";\r\n      if (persone.gender === \"men\") {\r\n        color = \"#a1a7cc\";\r\n      } else if (persone.gender === \"women\") {\r\n        color = \"#cca1a1\";\r\n      }\r\n      branchs[i] = {\r\n        key: persone.id,\r\n        parent: persone.parent,\r\n        lastname: persone.lastname,\r\n        firstname: persone.firstname,\r\n        surname: persone.surname,\r\n        img: \"1829050.png\", //REACT_APP_API_URL + persone.img,\r\n        color: color,\r\n      };\r\n      // link[i] = {\r\n      //  key: -(i + 1),\r\n      //  from: persone.id,\r\n      // to: persone.parent,\r\n      //};\r\n      //console.log(link[i]);\r\n    }\r\n  };\r\n\r\n  const textStyle = { margin: new go.Margin(2, 10, 0, 0), stroke: \"white\" };\r\n\r\n  function initDiagram() {\r\n    const $ = go.GraphObject.make;\r\n    // set your license key here before creating the diagram: go.Diagram.licenseKey = \"...\";\r\n    const diagram = $(go.Diagram, {\r\n      \"undoManager.isEnabled\": true, // must be set to allow for model change listening\r\n      layout: new go.TreeLayout({ angle: 90, layerSpacing: 35 }), // 'undoManager.maxHistoryLength': 0,  // uncomment disable undo/redo functionality\r\n      //\"clickCreatingTool.archetypeNodeData\": {\r\n      // firstname: \"new persone\",\r\n      // color: \"#a1a7cc\",\r\n      //},\r\n      model: new go.TreeModel({\r\n        linkKeyProperty: \"key\", // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\r\n      }),\r\n    });\r\n\r\n    // define a simple Node template\r\n    diagram.nodeTemplate = $(\r\n      go.Node,\r\n      \"Auto\", // the Shape will go around the TextBlock\r\n      {\r\n        // here the second argument is this object, which is this Node\r\n        doubleClick: (e, node) => {\r\n          window.open(\"..\" + PERSONE_ROUTE + \"/\" + node.key);\r\n        },\r\n      },\r\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify\r\n      ),\r\n      $(\r\n        go.Shape,\r\n        \"RoundedRectangle\",\r\n        {\r\n          name: \"SHAPE\",\r\n          fill: \"#ccc\",\r\n          strokeWidth: 0,\r\n        },\r\n        new go.Binding(\"fill\", \"color\")\r\n      ),\r\n      $(\r\n        go.Panel,\r\n        \"Horizontal\",\r\n        $(\r\n          go.Picture,\r\n          {\r\n            //source: \"1829050.png\",\r\n            margin: 10,\r\n            width: 50,\r\n            height: 50,\r\n            background: \"white\",\r\n          },\r\n          new go.Binding(\"sourse\", \"img\")\r\n        ),\r\n        $(\r\n          go.Panel,\r\n          \"Vertical\",\r\n          $(\r\n            go.TextBlock,\r\n            textStyle, // some room around the text\r\n            new go.Binding(\"text\", \"lastname\").makeTwoWay()\r\n          ),\r\n          $(\r\n            go.TextBlock,\r\n            textStyle, // some room around the text\r\n            new go.Binding(\"text\", \"firstname\").makeTwoWay()\r\n          ),\r\n          $(\r\n            go.TextBlock,\r\n            textStyle, // some room around the text\r\n            new go.Binding(\"text\", \"surname\").makeTwoWay()\r\n          )\r\n        )\r\n      )\r\n    );\r\n\r\n    if (\r\n      checkId() ===\r\n      (Number.isInteger(user.user.id) ? user.user.id.toString() : \"0\")\r\n    ) {\r\n      diagram.nodeTemplate.contextMenu = $(\r\n        \"ContextMenu\",\r\n        $(\"ContextMenuButton\", $(go.TextBlock, \"Добавить Родственика\"), {\r\n          click: (e, button) => {\r\n            const node = button.part.adornedPart;\r\n            if (node !== null) {\r\n              const thisemp = node.data;\r\n              diagram.startTransaction(\"add employee\");\r\n              const newemp = {\r\n                firstname: \"Родственник\",\r\n                parent: thisemp.key,\r\n              };\r\n              diagram.model.addNodeData(newemp);\r\n              const newnode = diagram.findNodeForData(newemp);\r\n              if (newnode) newnode.location = node.location;\r\n              createPersone({\r\n                firstname: newemp.firstname,\r\n                parent: newemp.parent,\r\n                user: user.user.id,\r\n                info: '{\"info\": [{\"title\": \"Дата рождения\", \"description\":\"\"},{\"title\": \"Страна\", \"description\":\"\"},{\"title\": \"Город\", \"description\":\"\"}]}',\r\n              }).then(() => diagram.commitTransaction(\"add employee\"));\r\n            }\r\n          },\r\n        }),\r\n        $(\"ContextMenuButton\", $(go.TextBlock, \"Удалить Родственника\"), {\r\n          click: (e, button) => {\r\n            // reparent the subtree to this node's boss, then remove the node\r\n            const node = button.part.adornedPart;\r\n            if (node !== null) {\r\n              diagram.startTransaction(\"reparent remove\");\r\n              const chl = node.findTreeChildrenNodes();\r\n              // iterate through the children and set their parent key to our selected node's parent key\r\n              while (chl.next()) {\r\n                const emp = chl.value;\r\n                diagram.model.setParentKeyForNodeData(\r\n                  emp.data,\r\n                  node.findTreeParentNode().data.key\r\n                );\r\n              }\r\n              // and now remove the selected node itself\r\n              diagram.model.removeNodeData(node.data);\r\n              diagram.commitTransaction(\"reparent remove\");\r\n            }\r\n          },\r\n        }),\r\n        $(\"ContextMenuButton\", $(go.TextBlock, \"Удалить Родственника и Цепь\"), {\r\n          click: (e, button) => {\r\n            // remove the whole subtree, including the node itself\r\n            const node = button.part.adornedPart;\r\n            if (node !== null) {\r\n              diagram.startTransaction(\"remove dept\");\r\n              diagram.removeParts(node.findTreeParts());\r\n              diagram.commitTransaction(\"remove dept\");\r\n            }\r\n          },\r\n        })\r\n      );\r\n    }\r\n\r\n    diagram.linkTemplate = $(\r\n      go.Link,\r\n      { routing: go.Link.Orthogonal, corner: 5 },\r\n      new go.Shape({ strokeWidth: 3, stroke: \"#ccc\" })\r\n    );\r\n\r\n    return diagram;\r\n  }\r\n\r\n  /**\r\n   * This function handles any changes to the GoJS model.\r\n   * It is here that you would make any updates to your React state, which is discussed belo.\r\n   */\r\n  function handleModelChange(changes) {\r\n    // console.log(changes);\r\n  }\r\n  createBranches(persone.persones);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div>\r\n        <Spinner animation={\"grow\"} />\r\n        <h2>Дерево загружается</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ReactDiagram\r\n        initDiagram={initDiagram}\r\n        divClassName=\"diagram-component\"\r\n        nodeDataArray={branchs}\r\n        onModelChange={handleModelChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tree;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}